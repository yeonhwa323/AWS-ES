/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements. 
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.ml_bundle_jsonpfunction=window.ml_bundle_jsonpfunction||[]).push([[20],{242:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"c",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(8),l=n(74),s=n(120),i=n(26);const o=60;function r(e){return function(e,t){var n,a;const i=Math.ceil(null!==(n=Object(l.s)(e.map((e=>e.analysis_config.bucket_span))))&&void 0!==n?n:0),r=Math.ceil(null!==(a=Object(l.s)(t.map((e=>e.query_delay)).filter(s.a)))&&void 0!==a?a:0),d=Math.max(2*o,2*i)+r+1;return`${Math.ceil(d/60)}m`}(e,e.map((e=>e.datafeed_config)))}function d(e){const t=Object(i.a)(e.analysis_config.bucket_span);if(null===t)throw new Error("Unable to resolve a bucket span length");return Math.ceil(o/t.asSeconds())}const c=["datafeed","mml","delayedData","errorMessages"];function u(e){var t,n,l,s,i,o,r,d,u,m,p,b,g,y;const f={datafeed:{enabled:null===(t=null==e||null===(n=e.datafeed)||void 0===n?void 0:n.enabled)||void 0===t||t},mml:{enabled:null===(l=null==e||null===(s=e.mml)||void 0===s?void 0:s.enabled)||void 0===l||l},delayedData:{enabled:null===(i=null==e||null===(o=e.delayedData)||void 0===o?void 0:o.enabled)||void 0===i||i,docsCount:null!==(r=null==e||null===(d=e.delayedData)||void 0===d?void 0:d.docsCount)&&void 0!==r?r:1,timeInterval:null!==(u=null==e||null===(m=e.delayedData)||void 0===m?void 0:m.timeInterval)&&void 0!==u?u:null},behindRealtime:{enabled:null===(p=null==e||null===(b=e.behindRealtime)||void 0===b?void 0:b.enabled)||void 0===p||p},errorMessages:{enabled:null===(g=null==e||null===(y=e.errorMessages)||void 0===y?void 0:y.enabled)||void 0===g||g}};return Object(a.pick)(f,c)}},763:function(e,t,n){"use strict";n.r(t),n.d(t,"registerEmbeddables",(function(){return a.e})),n.d(t,"registerManagementSection",(function(){return l.a})),n.d(t,"registerMlUiActions",(function(){return s.b})),n.d(t,"registerSearchLinks",(function(){return y})),n.d(t,"registerMlAlerts",(function(){return D}));var a=n(103),l=n(35),s=n(162),i=n(2),o=n(0);const r={id:"mlOverviewDeepLink",title:i.i18n.translate("xpack.ml.deepLink.overview",{defaultMessage:"Overview"}),path:`/${o.b.OVERVIEW}`},d={id:"mlAnomalyDetectionDeepLink",title:i.i18n.translate("xpack.ml.deepLink.anomalyDetection",{defaultMessage:"Anomaly Detection"}),path:`/${o.b.ANOMALY_DETECTION_JOBS_MANAGE}`},c={id:"mlDataFrameAnalyticsDeepLink",title:i.i18n.translate("xpack.ml.deepLink.dataFrameAnalytics",{defaultMessage:"Data Frame Analytics"}),path:`/${o.b.DATA_FRAME_ANALYTICS_JOBS_MANAGE}`,deepLinks:[{id:"mlTrainedModelsDeepLink",title:i.i18n.translate("xpack.ml.deepLink.trainedModels",{defaultMessage:"Trained Models"}),path:`/${o.b.DATA_FRAME_ANALYTICS_MODELS_MANAGE}`}]},u={id:"dataVisualizerDeepLink",title:i.i18n.translate("xpack.ml.deepLink.dataVisualizer",{defaultMessage:"Data Visualizer"}),path:`/${o.b.DATA_VISUALIZER}`},m={id:"mlFileUploadDeepLink",title:i.i18n.translate("xpack.ml.deepLink.fileUpload",{defaultMessage:"File Upload"}),path:`/${o.b.DATA_VISUALIZER_FILE}`},p={id:"mlIndexDataVisualizerDeepLink",title:i.i18n.translate("xpack.ml.deepLink.indexDataVisualizer",{defaultMessage:"Index Data Visualizer"}),path:`/${o.b.DATA_VISUALIZER_INDEX_SELECT}`},b={id:"mlSettingsDeepLink",title:i.i18n.translate("xpack.ml.deepLink.settings",{defaultMessage:"Settings"}),path:`/${o.b.SETTINGS}`,deepLinks:[{id:"mlCalendarSettingsDeepLink",title:i.i18n.translate("xpack.ml.deepLink.calendarSettings",{defaultMessage:"Calendars"}),path:`/${o.b.CALENDARS_MANAGE}`},{id:"mlFilterListsSettingsDeepLink",title:i.i18n.translate("xpack.ml.deepLink.filterListsSettings",{defaultMessage:"Filter Lists"}),path:`/${o.b.SETTINGS}`}]};function g(e){const t=[u,m,p];return!0===e&&t.push(r,d,c,b),t}function y(e,t){e.next((()=>({keywords:[i.i18n.translate("xpack.ml.keyword.ml",{defaultMessage:"ML"})],deepLinks:g(t)})))}var f=n(15),_=n(111),v=n(6),k=n(34),A=n(17);const M=Object(A.g)(),h=Object(A.d)({min:1});var x=n(242);function D(e,t){e.ruleTypeRegistry.register({id:_.d.ANOMALY_DETECTION,description:i.i18n.translate("xpack.ml.alertTypes.anomalyDetection.description",{defaultMessage:"Alert when anomaly detection jobs results match the condition."}),iconClass:"bell",documentationUrl:e=>e.links.ml.alertingRules,alertParamsExpression:Object(f.lazy)((()=>Promise.all([n.e(0),n.e(14)]).then(n.bind(null,764)))),validate:e=>{var t,n,a,l,s,o,r,d;const c={errors:{jobSelection:new Array,severity:new Array,resultType:new Array,topNBuckets:new Array,lookbackInterval:new Array}};return null!==(t=e.jobSelection)&&void 0!==t&&null!==(n=t.jobIds)&&void 0!==n&&n.length||null!==(a=e.jobSelection)&&void 0!==a&&null!==(l=a.groupIds)&&void 0!==l&&l.length||c.errors.jobSelection.push(i.i18n.translate("xpack.ml.alertTypes.anomalyDetection.jobSelection.errorMessage",{defaultMessage:"Job selection is required"})),(Array.isArray(null===(s=e.jobSelection)||void 0===s?void 0:s.groupIds)&&(null===(o=e.jobSelection)||void 0===o?void 0:o.groupIds.length)>0||Array.isArray(null===(r=e.jobSelection)||void 0===r?void 0:r.jobIds)&&(null===(d=e.jobSelection)||void 0===d?void 0:d.jobIds.length)>1)&&c.errors.jobSelection.push(i.i18n.translate("xpack.ml.alertTypes.anomalyDetection.singleJobSelection.errorMessage",{defaultMessage:"Only one job per rule is allowed"})),void 0===e.severity&&c.errors.severity.push(i.i18n.translate("xpack.ml.alertTypes.anomalyDetection.severity.errorMessage",{defaultMessage:"Anomaly severity is required"})),void 0===e.resultType&&c.errors.resultType.push(i.i18n.translate("xpack.ml.alertTypes.anomalyDetection.resultType.errorMessage",{defaultMessage:"Result type is required"})),e.lookbackInterval&&M(e.lookbackInterval)&&c.errors.lookbackInterval.push(i.i18n.translate("xpack.ml.alertTypes.anomalyDetection.lookbackInterval.errorMessage",{defaultMessage:"Lookback interval is invalid"})),"number"==typeof e.topNBuckets&&h(e.topNBuckets)&&c.errors.topNBuckets.push(i.i18n.translate("xpack.ml.alertTypes.anomalyDetection.topNBuckets.errorMessage",{defaultMessage:"Number of buckets is invalid"})),c},requiresAppContext:!1,defaultActionMessage:i.i18n.translate("xpack.ml.alertTypes.anomalyDetection.defaultActionMessage",{defaultMessage:"Elastic Stack Machine Learning Alert:\n- Job IDs: \\{\\{context.jobIds\\}\\}\n- Time: \\{\\{context.timestampIso8601\\}\\}\n- Anomaly score: \\{\\{context.score\\}\\}\n\n\\{\\{context.message\\}\\}\n\n\\{\\{#context.topInfluencers.length\\}\\}\n  Top influencers:\n  \\{\\{#context.topInfluencers\\}\\}\n    \\{\\{influencer_field_name\\}\\} = \\{\\{influencer_field_value\\}\\} [\\{\\{score\\}\\}]\n  \\{\\{/context.topInfluencers\\}\\}\n\\{\\{/context.topInfluencers.length\\}\\}\n\n\\{\\{#context.topRecords.length\\}\\}\n  Top records:\n  \\{\\{#context.topRecords\\}\\}\n    \\{\\{function\\}\\}(\\{\\{field_name\\}\\}) \\{\\{by_field_value\\}\\} \\{\\{over_field_value\\}\\} \\{\\{partition_field_value\\}\\} [\\{\\{score\\}\\}]\n  \\{\\{/context.topRecords\\}\\}\n\\{\\{/context.topRecords.length\\}\\}\n\n\\{\\{! Replace kibanaBaseUrl if not configured in Kibana \\}\\}\n[Open in Anomaly Explorer](\\{\\{\\{kibanaBaseUrl\\}\\}\\}\\{\\{\\{context.anomalyExplorerUrl\\}\\}\\})\n"})}),function(e,t){e.ruleTypeRegistry.register({id:_.d.AD_JOBS_HEALTH,description:i.i18n.translate("xpack.ml.alertTypes.jobsHealthAlertingRule.description",{defaultMessage:"Alert when anomaly detection jobs experience operational issues. Enable suitable alerts for critically important jobs."}),iconClass:"bell",documentationUrl:e=>e.links.ml.alertingRules,alertParamsExpression:Object(f.lazy)((()=>Promise.all([n.e(0),n.e(15)]).then(n.bind(null,767)))),validate:e=>{var t,n,a,l;const s={errors:{includeJobs:new Array,testsConfig:new Array,delayedData:new Array}};null!==(t=e.includeJobs)&&void 0!==t&&null!==(n=t.jobIds)&&void 0!==n&&n.length||null!==(a=e.includeJobs)&&void 0!==a&&null!==(l=a.groupIds)&&void 0!==l&&l.length||s.errors.includeJobs.push(i.i18n.translate("xpack.ml.alertTypes.jobsHealthAlertingRule.includeJobs.errorMessage",{defaultMessage:"Job selection is required"}));const o=Object(x.b)(e.testsConfig);return Object.values(o).every((e=>!1===(null==e?void 0:e.enabled)))&&s.errors.testsConfig.push(i.i18n.translate("xpack.ml.alertTypes.jobsHealthAlertingRule.testsConfig.errorMessage",{defaultMessage:"At least one health check must be enabled."})),o.delayedData.timeInterval&&M(o.delayedData.timeInterval)&&s.errors.delayedData.push(i.i18n.translate("xpack.ml.alertTypes.jobsHealthAlertingRule.testsConfig.delayedData.timeIntervalErrorMessage",{defaultMessage:"Invalid time interval"})),0===o.delayedData.docsCount&&s.errors.delayedData.push(i.i18n.translate("xpack.ml.alertTypes.jobsHealthAlertingRule.testsConfig.delayedData.docsCountErrorMessage",{defaultMessage:"Invalid number of documents"})),s},requiresAppContext:!1,defaultActionMessage:i.i18n.translate("xpack.ml.alertTypes.jobsHealthAlertingRule.defaultActionMessage",{defaultMessage:"[\\{\\{rule.name\\}\\}] Anomaly detection jobs health check result:\n\\{\\{context.message\\}\\}\n\\{\\{#context.results\\}\\}\n  Job ID: \\{\\{job_id\\}\\}\n  \\{\\{#datafeed_id\\}\\}Datafeed ID: \\{\\{datafeed_id\\}\\}\n  \\{\\{/datafeed_id\\}\\}\\{\\{#datafeed_state\\}\\}Datafeed state: \\{\\{datafeed_state\\}\\}\n  \\{\\{/datafeed_state\\}\\}\\{\\{#memory_status\\}\\}Memory status: \\{\\{memory_status\\}\\}\n  \\{\\{/memory_status\\}\\}\\{\\{#model_bytes\\}\\}Model size: \\{\\{model_bytes\\}\\}\n  \\{\\{/model_bytes\\}\\}\\{\\{#model_bytes_memory_limit\\}\\}Model memory limit: \\{\\{model_bytes_memory_limit\\}\\}\n  \\{\\{/model_bytes_memory_limit\\}\\}\\{\\{#peak_model_bytes\\}\\}Peak model bytes: \\{\\{peak_model_bytes\\}\\}\n  \\{\\{/peak_model_bytes\\}\\}\\{\\{#model_bytes_exceeded\\}\\}Model exceeded: \\{\\{model_bytes_exceeded\\}\\}\n  \\{\\{/model_bytes_exceeded\\}\\}\\{\\{#log_time\\}\\}Memory logging time: \\{\\{log_time\\}\\}\n  \\{\\{/log_time\\}\\}\\{\\{#failed_category_count\\}\\}Failed category count: \\{\\{failed_category_count\\}\\}\n  \\{\\{/failed_category_count\\}\\}\\{\\{#annotation\\}\\}Annotation: \\{\\{annotation\\}\\}\n  \\{\\{/annotation\\}\\}\\{\\{#missed_docs_count\\}\\}Number of missed documents: \\{\\{missed_docs_count\\}\\}\n  \\{\\{/missed_docs_count\\}\\}\\{\\{#end_timestamp\\}\\}Latest finalized bucket with missing docs: \\{\\{end_timestamp\\}\\}\n  \\{\\{/end_timestamp\\}\\}\\{\\{#errors\\}\\}Error message: \\{\\{message\\}\\} \\{\\{/errors\\}\\}\n\\{\\{/context.results\\}\\}\n"})})}(e),t&&function(e){e.registerNavigation(v.e,_.d.ANOMALY_DETECTION,(e=>{var t,n;const a=e.params,l=[...new Set([...null!==(t=a.jobSelection.jobIds)&&void 0!==t?t:[],...null!==(n=a.jobSelection.groupIds)&&void 0!==n?n:[]])];return Object(k.d)("",{jobIds:l})}))}(t)}}}]);