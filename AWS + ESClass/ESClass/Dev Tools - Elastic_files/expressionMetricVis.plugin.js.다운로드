!function(e){function t(t){for(var n,o,s=t[0],i=t[1],a=0,c=[];a<s.length;a++)o=s[a],Object.prototype.hasOwnProperty.call(r,o)&&r[o]&&c.push(r[o][0]),r[o]=0;for(n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n]);for(l&&l(t);c.length;)c.shift()()}var n={},r={0:0};function o(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.e=function(e){var t=[],n=r[e];if(0!==n)if(n)t.push(n[2]);else{var s=new Promise((function(t,o){n=r[e]=[t,o]}));t.push(n[2]=s);var i,a=document.createElement("script");a.charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.src=function(e){return o.p+"expressionMetricVis.chunk."+e+".js"}(e);var l=new Error;i=function(t){a.onerror=a.onload=null,clearTimeout(c);var n=r[e];if(0!==n){if(n){var o=t&&("load"===t.type?"missing":t.type),s=t&&t.target&&t.target.src;l.message="Loading chunk "+e+" failed.\n("+o+": "+s+")",l.name="ChunkLoadError",l.type=o,l.request=s,n[1](l)}r[e]=void 0}};var c=setTimeout((function(){i({type:"timeout",target:a})}),12e4);a.onerror=a.onload=i,document.head.appendChild(a)}return Promise.all(t)},o.m=e,o.c=n,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o.oe=function(e){throw console.error(e),e};var s=window.expressionMetricVis_bundle_jsonpfunction=window.expressionMetricVis_bundle_jsonpfunction||[],i=s.push.bind(s);s.push=t,s=s.slice();for(var a=0;a<s.length;a++)t(s[a]);var l=i;o(o.s=9)}([function(e,t){e.exports=__kbnSharedDeps__.KbnI18n},function(e,t,n){n.r(t);var r=__kbnBundles__.get("plugin/charts/common");Object.defineProperties(t,Object.getOwnPropertyDescriptors(r))},function(e,t){e.exports=__kbnSharedDeps__.EmotionReact},function(e,t){e.exports=__kbnSharedDeps__.ReactDom},function(e,t){e.exports=__kbnSharedDeps__.React},function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return s}));var r=n(7);const[o,s]=Object(r.createGetterSetter)("fieldFormats")},function(e,t,n){n.r(t);var r=__kbnBundles__.get("plugin/visualizations/common/prepare_log_table");Object.defineProperties(t,Object.getOwnPropertyDescriptors(r))},function(e,t,n){n.r(t);var r=__kbnBundles__.get("plugin/kibanaUtils/public");Object.defineProperties(t,Object.getOwnPropertyDescriptors(r))},function(e,t,n){n.r(t);var r=__kbnBundles__.get("plugin/visualizations/public");Object.defineProperties(t,Object.getOwnPropertyDescriptors(r))},function(e,t,n){n(10),__kbnBundles__.define("plugin/expressionMetricVis/public",n,11)},function(e,t,n){n.p=window.__kbnPublicPath__.expressionMetricVis},function(e,t,n){"use strict";n.r(t),n.d(t,"plugin",(function(){return g}));var r=n(0);var o=n(6),s=n(1);const i="metricVis",a=()=>({name:i,type:"render",inputTypes:["datatable"],help:r.i18n.translate("expressionMetricVis.function.help",{defaultMessage:"Metric visualization"}),args:{percentageMode:{types:["boolean"],default:!1,help:r.i18n.translate("expressionMetricVis.function.percentageMode.help",{defaultMessage:"Shows metric in percentage mode. Requires colorRange to be set."})},colorSchema:{types:["string"],default:'"Green to Red"',options:Object.values(s.vislibColorMaps).map((e=>e.id)),help:r.i18n.translate("expressionMetricVis.function.colorSchema.help",{defaultMessage:"Color schema to use"})},colorMode:{types:["string"],default:'"None"',options:[s.ColorMode.None,s.ColorMode.Labels,s.ColorMode.Background],help:r.i18n.translate("expressionMetricVis.function.colorMode.help",{defaultMessage:"Which part of metric to color"})},colorRange:{types:["range"],multi:!0,default:"{range from=0 to=10000}",help:r.i18n.translate("expressionMetricVis.function.colorRange.help",{defaultMessage:"A range object specifying groups of values to which different colors should be applied."})},useRanges:{types:["boolean"],default:!1,help:r.i18n.translate("expressionMetricVis.function.useRanges.help",{defaultMessage:"Enabled color ranges."})},invertColors:{types:["boolean"],default:!1,help:r.i18n.translate("expressionMetricVis.function.invertColors.help",{defaultMessage:"Inverts the color ranges"})},showLabels:{types:["boolean"],default:!0,help:r.i18n.translate("expressionMetricVis.function.showLabels.help",{defaultMessage:"Shows labels under the metric values."})},bgFill:{types:["string"],default:'"#000"',aliases:["backgroundFill","bgColor","backgroundColor"],help:r.i18n.translate("expressionMetricVis.function.bgFill.help",{defaultMessage:"Color as html hex code (#123456), html color (red, blue) or rgba value (rgba(255,255,255,1))."})},font:{types:["style"],help:r.i18n.translate("expressionMetricVis.function.font.help",{defaultMessage:"Font settings."}),default:"{font size=60}"},subText:{types:["string"],aliases:["label","text","description"],default:'""',help:r.i18n.translate("expressionMetricVis.function.subText.help",{defaultMessage:"Custom text to show under the metric"})},metric:{types:["vis_dimension"],help:r.i18n.translate("expressionMetricVis.function.metric.help",{defaultMessage:"metric dimension configuration"}),required:!0,multi:!0},bucket:{types:["vis_dimension"],help:r.i18n.translate("expressionMetricVis.function.bucket.help",{defaultMessage:"bucket dimension configuration"})}},fn(e,t,n){var a;if(t.percentageMode&&(!t.colorRange||0===t.colorRange.length))throw new Error("colorRange must be provided when using percentageMode");const l=Number.parseInt(t.font.spec.fontSize||"",10);if(null!=n&&null!==(a=n.inspectorAdapters)&&void 0!==a&&a.tables){const s=[[t.metric,r.i18n.translate("expressionMetricVis.function.dimension.metric",{defaultMessage:"Metric"})]];t.bucket&&s.push([[t.bucket],r.i18n.translate("expressionMetricVis.function.dimension.splitGroup",{defaultMessage:"Split group"})]);const i=Object(o.prepareLogTable)(e,s);n.inspectorAdapters.tables.logDatatable("default",i)}return{type:"render",as:i,value:{visData:e,visType:"metric",visConfig:{metric:{percentageMode:t.percentageMode,useRanges:t.useRanges,colorSchema:t.colorSchema,metricColorMode:t.colorMode,colorsRange:t.colorRange,labels:{show:t.showLabels},invertColors:t.invertColors,style:{bgFill:t.bgFill,bgColor:t.colorMode===s.ColorMode.Background,labelColor:t.colorMode===s.ColorMode.Labels,subText:t.subText,fontSize:l}},dimensions:{metrics:t.metric,...t.bucket?{bucket:t.bucket}:{}}}}}}});var l=n(5),c=n(4),u=n(3),p=n(8),d=n(2);const f=Object(c.lazy)((()=>n.e(1).then(n.bind(null,29)))),b=()=>({name:i,displayName:"metric visualization",reuseDomNode:!0,render:async(e,{visData:t,visConfig:n},r)=>{var o;r.onDestroy((()=>{Object(u.unmountComponentAtNode)(e)})),Object(u.render)(Object(d.jsx)(p.VisualizationContainer,{className:"mtrVis",showNoResult:!(null!==(o=t.rows)&&void 0!==o&&o.length),handlers:r},Object(d.jsx)(f,{visData:t,visParams:n,renderComplete:r.done,fireEvent:r.event})),e)}});class plugin_ExpressionMetricPlugin{setup(e,{expressions:t}){t.registerFunction(a),t.registerRenderer(b)}start(e,{fieldFormats:t}){Object(l.b)(t)}}function g(){return new plugin_ExpressionMetricPlugin}},function(e,t){e.exports=__kbnSharedDeps_npm__},function(e,t){e.exports=__kbnSharedDeps__.Lodash},function(e,t){e.exports=__kbnSharedDeps__.ElasticEui},function(e,t){e.exports=__kbnSharedDeps__.Classnames},function(e,t,n){n.r(t);var r=__kbnBundles__.get("plugin/charts/public");Object.defineProperties(t,Object.getOwnPropertyDescriptors(r))}]);