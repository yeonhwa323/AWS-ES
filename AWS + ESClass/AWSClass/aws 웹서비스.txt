--240611
aws 웹서비스

1. aws -> admin 로그인
2. EC2 -> windows2022 실행
	      퍼블릭 IPv4 주소
	      내꺼 주소
3. RDS -> MySQL 실행 (ss-lecture)
		엔드포인트
		ss-lecture.cf8iwk4icg4v.ap-northeast-2.rds.amazonaws.com
4. Oracle SQL Developer 실행
5. 윈도우 탐색기
   Class 
	ㄴ Workspace
		ㄴ AWSClass 폴더 생성
6.  Eclipse 실행 -> AWSClass 작업폴더 선택
	-> 다이나믹 웹 프로젝트 생성 : aswPro + 톰캣 9.0
			
7. awsPro
	ㄴ webapp에 index.jsp 추가

8. awsPro -> aws RDS(mySQL) 연동

--240612
1. 폴더생성
 Class 폴더
    ㄴ Workspace 폴더 
	 ㄴ ESClass 폴더
		ㄴ EL수업 1일차.txt
2. https://www.elastic.co/kr/

3. [ elasticsearch ]
 1) 엘라스틱서치는 "루씬 기반"의 자바 오픈 소스 분산 검색 엔진이다.
	- "루씬" : 
 2) 방대한 양의 데이터를 신속하고 거의 실시간으로 저장, 검색, 분석할 수 있다.
 3) HTTP 웹 인터페이스와 스키마에서 자유로운 
     JSON 문서와 함께
     분산 멀티테넌트 지원 전문 검색 엔진을 제공한다.
 4) HTTP 프로토콜을 사용한 REST 방식의 API를 제공한다.
 5) 데이터 저장소가 아니라 오라클과 같은 데이터베이스를 대체할 수 없다.

4. Elastic Stack( ELK Stack )
 1) 엘라스틱서치는 검색을 위해 단독으로 사용할 수 있고
     ELK( Elasticsearch, Logstash, Kibana ) 스택으로 사용할 수 있다.
 
 2) Logstash / Beats
  	- 다양한 소스(DB, CSV등)로부터 데이터를 수집, 집계, 파싱하여 
	  Elasticsearch에게 전달
 3) Elasticsearch
 	- Logstash로부터 받은 데이터를 검색 및 집계 -> 필요한 관심 정보 저장
 4) Kibana
	- Elasticsearch의 빠른 검색을 통해 데이터를 시각화 및 모니터링 기능 제공
	- 처음 키바나의 기능 : 시각화 도구 -> 기능 확장되어서 전체 관리 도구 사용

5. Apache Lucene
 1) 1999년 더그 커팅이 개발했다. 
 2) [풀텍스트 검색 엔진을 만들 수 있는] 자바 라이브러리
 3) Elasticsearch
     Solr
6. 풀 텍스트 검색(Full-Text Search)
 1) 전문 검색(全文 檢索) : 내용 전체를 색인해서 특정 단어가 포함된 단어를 검색하는 것
 2) 어떤 정보의 본문 내용 전체를 색인 형태로 제공함으로써
    각종 데이터를 빠르고 정확하게 검색할 수 있도록 지원하는 시스템이다.

7. Elasticsearch 특징
 1) Elasticsearch는 빠르다.
   Apache Lucene을 기반으로 구축되어 전체 텍스트 검색에 뛰어나다.
 2) 거의 실시간 검색 플랫폼이다
 3) 분산적이다.(샤드,리플리카)
 4) 데이터 저장소보다 검색 엔진에 가깝다.

8.  Elasticsearch 활용 사례
 1) 위키피디아
 2) 더가디언지 - 방문객의 로그 분석 등
 3) 깃허브 - 소스코드 검색

9. Elasticsearch 핵심 개념
 2) 클러스터
    - 노드 + 노드 + .... : 하나 이상의 노드(단일 서버)가 모인 것.
    - 전체 데이터를 저장하고 모든 노드를 통합. 색인화(목차화) 및 검색 기능을 제공
    - 클러스트는 고유한 이름으로 식별되는데, 기본 이름은 "Elasticsearch"이다.
 1) 노드 (Node)
    - 단일 서버
    - 데이터를 저장하고 클러스터의 색인화 및 검색 기능에 참여
    - 기본 이름은 시작 시 노드에 저장되는 임의 UUID(특정 이름을 명시하는 것도 가능).
 3) 인덱스
   - 비슷한 특징을 가진 문서(레코드, 데이터)의 집합.
   - 인덱스의 이름은 모두 소문자.
   - RDBMS의 데이터베이스 역할
 4) 타입
   - 하나의 색인에서 하나 이상의 유형을 정의할 수 있다.
   - Elasticsearch 7.X 이후부터는 타입의 개념이 없어졌다.
     _doc 고정자로 통일되었다.
   - RDBMS의 테이블 역할
 5) 도큐먼트
   - 데이터 저장 단위
   - 색인화 할 수 있는 기본 정보 단위이다.
   - JSON 형태로 관리.
   - RDBMS의 레코드 역할
 6) 샤드 & 리플리카
- 색인은 방대한 양의 데이터를 저장할 수 있는데, 
  이 데이터가 단일 노드의 하드웨어 한도를 초과할 수 있다. 
  단일 노드의 디스크에서 수용하지 못하거나 
  단일 노드에서 검색 요청 처리 시 속도가 느려질 수 있다.
- 그래서 Elasticseach는 색인을 "샤드"라는 조각으로 분할하는 기능을 제공한다.
- 각 샤드는 그 자체가 온전한 기능을 가진 독립적인 색인이며, 클래스터의 어떤 노드에서도 호스팅할 수 있다.
- 색인의 샤드에 대해 하나 이상의 복사본을 생성할 수 있는데, 이를 리플리카 샤드(Replica Shard)라고 한다.
  (줄여서 리플리카)
- 모든 리플리카에서 병렬 방식으로 검색을 실행할 수 있으므로 검색 볼륨/처리량을 확장할 수 있다.
- 리플리카 샤드는 원본인 기본 샤드와 동일한 노드에 배정되지 않는다.
- 요약하면 각 색인은 여러 개의 샤드로 분할할 수 있다.
- 기본적으로 Elasticseach의 각 색인은 기본 샤드 5개, 리플리카 1개를 가진다. 
  따라서 클러스터에 최소한 2개의 노드가 있다면 색인은 기본 샤드 5개, 리플리카 샤드 5개(완전한 리플리카 1개)를 
  가지므로 색인당 총 10개의 샤드가 존재하게 된다.
- 각 Elasticseach 샤드는 Lucene 색인이다. Lucene은 최대 2,147,483,519 개의 문서를 포함할 수 있다

10. ES 와 RDMS 용어 비교
   RDBMS				ES
   스키마(DB객체)	    매핑(Mapping)
   Database		            인덱스(Index)
   Table			    타입(Type)
   Record			    도큐먼트(Document)
   Column			     필드(Field)
   SQL			     QueryDSL
  
11. ES 와 RDMS
 RDBMS		ES(REST API)
SELECT문		GET	
예) SELECT * FROM address where id = 1;
    > curl -X GET http://localhost:9200/address/ doc/1
					[인덱스명=DB명]/타입(테이블명)
INSERT문		PUT/POST
예) INSERT INTO address VALUES (xxx);
   > curl -X POST http://localhost:9200/address/ doc/1 -d'{json 형식의 데이터}'

UPDATE문		PUT/POST
예) UPDATE address SET xxx WHERE id = 1;
   > curl -X PUT http://localhost:9200/address/ doc/1 -d'{json 형식의 데이터}'

DELETE문		DELETE
예) delete from address where id = 1;
  > curl -X DELETE  http://localhost:9200/address/ doc/1 

12. ELK Stack 설치 
모두 동일한 버전(windows용)으로 다운로드 
https://www.elastic.co/kr/downloads/elasticsearch
 
1) Elasticsearch 7.17.14
https://www.elastic.co/kr/downloads/past-releases/elasticsearch-7-17-14

2) Kibana 7.17.14
https://www.elastic.co/kr/downloads/past-releases/kibana-7-17-14

3) Logstash 7.17.14
https://www.elastic.co/kr/downloads/past-releases/logstash-7-17-14

13. C://
      ㄴ Tools//
	    ㄴ ELK 폴더 생성
14. Elasticsearch 설치 및 클러스터 구성
   - 절대 elasticsearch.yml을 수정하기 전에 elasticsearch를 먼저 실행하면 안된다.
[환경설정 맨 상단에 추가]
cluster.name: "mycluster"
node.name: "node-1"
node.master: true
node.data: true
network.host: 0.0.0.0
http.port: 9200
transport.tcp.port: 9300
discovery.seed_hosts: ["127.0.0.1:9300"]
cluster.initial_master_nodes: ["node-1"] 
discovery.zen.minimum_master_nodes: 1
xpack.security.enabled: false
ingest.geoip.downloader.enabled: false

# Elasticsearch Ajax 접속 허용하기
http.cors.enabled : true
http.cors.allow-origin : "*"
http.cors.allow-methods : OPTIONS, HEAD, GET, POST, PUT, DELETE
http.cors.allow-headers : X-Requested-With, X-Auth-Token, Content-Type, Content-Length

15. ES는 REST API를 사용해서 Index에 Document(레코드)에 생성,수정,삭제.
  - REST API 를 통해 Index에 Document를 추가하는 작업을 "문서를 색인화한다."라고 한다.
  - 단일 Document 별로 고유한 URL을 가진다.
  - ES 7.X
    고유한 URL: http://<host>:<port>/<인덱스>/_doc/<도큐먼트id>
  - REST API를 사용할 수 있는 도구
  1) curl
     - client url
     - curl(client url) 명령어는
    프로토콜들을 이용해 URL 로 데이터를 전송하여
    서버에 데이터를 보내거나 가져올때 사용하기 위한 명령줄 도구 및 라이브러리이다.
    - SHELL(커맨드라인 환경)에서
    REST API(http) 테스트 하고 싶으면  curl 명령어를 이용하면 된다.

    예) curl -V
	curl --version

	-V(명령축약어)
   	--version(명령어)

	curl -d --data HTTP POST요청 데이터 입력
	      -o --output File curl로 받아온 내용을 File이름으로 저장
	      -X --request     요청 시 사용할 메서드종류(GET,POST,PUT,PATCH)
	      -H			전송할 헤더를 지정
              -u 	--user	서버 사용자 및 비밀번호

 	wget/ curl
	- 둘다 웹 서버로부터 콘텐츠를 가져오는 명령어..

$ curl -X PUT "localhost:9200/customer/_doc/1?pretty" -H "Content-Type: application/json" -d "{ \"name\": \"Hong\" }" [데이터인서트]
$ curl -X GET http://localhost:9200/customer/_doc/1?pretty [데이터찾기]

  2) REST Client - Postman, Insomnia, [yet another rest client] 등등
  3) kibana > Dev Tools

--240612
C:\Tools\ELK\kibana-7.17.14-windows-x86_64\config
 
kibana.yml 파일에
elasticsearch.hosts: ["http://localhost:9200"]
server.host: "0.0.0.0"
붙여넣기

[Index CRUD]
1. curl
> curl -X GET "http://localhost:9200/[인덱스명]"
> curl -X PUT "http://localhost:9200/member?pretty"
> curl -X GET "http://localhost:9200/_cat/indices"

2. Document
> curl -X PUT "<서버IP>:<포트번호>/<인덱스(datebase이름)>/_doc(테이블명 1개이므로 유일)/<도큐먼트ID>" -H "Content-Type: application/json" -d 'JSON Data Body'


































